{"version":3,"sources":["firebase.js","redux/reducer.js","redux/reducers.js","redux/actions.js","components/bookingForm.js","redux/actionTypes.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","database","initialState","tasks","state","arguments","length","undefined","action","o","get tasks","add task","concat","Object","toConsumableArray","task","remove task","filter","id","type","combineReducers","createStore","Reducer","applyMiddleware","thunkMiddleware","BookingForm","handleCreate","form","_this","props","validateFields","err","values","resetFields","onCancel","alert","history","push","dispatch","this","ref","once","snap","forEach","data","val","then","getTasks","on","console","log","watchTaskRemovedEvent","_this2","getFieldDecorator","react_default","a","createElement","modal","title","className","visible","onOk","okText","es_form","style","marginLeft","layout","Item","label","rules","required","message","input","Component","withRouter","connect","create","Boolean","window","location","hostname","match","ReactDOM","render","es","store","BrowserRouter","Switch","Route","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9451a56f.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/database\";\nvar config = {\n  apiKey: \"AIzaSyDX2zAjIzTB9fu7hadZLZmjqscraC3uTH8\",\n  authDomain: \"dodo-75272.firebaseapp.com\",\n  databaseURL: \"https://dodo-75272.firebaseio.com\",\n  projectId: \"dodo-75272\",\n  storageBucket: \"dodo-75272.appspot.com\",\n  messagingSenderId: \"1065766410382\"\n};\nfirebase.initializeApp(config);\n\nconst database = firebase.database();\nexport default database;\n//firebaseApp.firestore().settings({ timestampsInSnapshots: true })\nexport const addRoomToFirebase = task => {\n  const id = task.id;\n  database.ref(`/rooms/${id}`).set(task);\n};\n\nexport const removeRoomFromFirebase = id => {\n  database.ref(`/rooms/${id}`).remove();\n};\n","const initialState = [];\n\nconst tasks = (state = initialState, action) => {\n  const o = {\n    \"get tasks\": () => action.tasks,\n    \"add task\": () => [...state, action.task],\n    \"remove task\": () => state.filter(task => task.id !== action.task.id)\n  };\n  return o[action.type] ? o[action.type]() : state;\n};\n\nexport default tasks;\n","import tasks from \"./reducer.js\";\n\nimport { combineReducers } from \"redux\";\nexport default combineReducers({ tasks });\n","import * as types from \"./actionTypes.js\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport database from \"../firebase\";\nimport thunkMiddleware from \"redux-thunk\";\nimport Reducer from \"./reducers\";\n\nexport const getTasks = tasks => ({ type: types.GET_TASKS, tasks });\nexport const addTask = task => ({ type: types.ADD_TASK, task });\nexport const removeTask = task => ({ type: types.REMOVE_TASK, task });\n\n/**\n * LISTENERS\n */\n\nexport const watchTaskAddedEvent = dispatch => {\n  database.ref(`/rooms/`).on(\"child_changed\", snap => {\n    dispatch(addTask(snap.val()));\n    console.log(\"hi\");\n  });\n};\n\nexport const watchTaskRemovedEvent = dispatch => {\n  database.ref(`/rooms/`).on(\"child_removed\", snap => {\n    dispatch(removeTask(snap.val()));\n  });\n};\n\n/**\n * THUNKS\n */\nexport const getTasksThunk = () => dispatch => {\n  const tasks = [];\n  database\n    .ref(`/rooms/`)\n    .once(\"value\", snap => {\n      snap.forEach(data => {\n        let task = data.val();\n        tasks.push(task);\n      });\n    })\n    .then(() => dispatch(getTasks(tasks)));\n};\n\nexport default createStore(Reducer, applyMiddleware(thunkMiddleware));\n","import React, { Component } from \"react\";\nimport \"../App.css\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { Button, Input, Modal, Form } from \"antd\";\nimport { addRoomToFirebase, removeRoomFromFirebase } from \"../firebase\";\nimport {\n  getTasksThunk,\n  watchTaskRemovedEvent,\n  watchTaskAddedEvent\n} from \"../redux/actions\";\n\nclass BookingForm extends Component {\n  componentDidMount() {\n    this.props.dispatch(getTasksThunk());\n    watchTaskAddedEvent(this.props.dispatch);\n    watchTaskRemovedEvent(this.props.dispatch);\n  }\n\n  handleCreate = () => {\n    const form = this.props.form;\n\n    form.validateFields((err, values) => {\n      if (err) return;\n      form.resetFields();\n      this.onCancel();\n      alert(\"thank you for registration\");\n    });\n  };\n\n  onCancel = () => {\n    this.props.history.push(\"/\");\n  };\n\n  render() {\n    const {\n      form: { getFieldDecorator }\n    } = this.props;\n\n    return (\n      <Modal\n        title=\"Let's Get Started\"\n        className=\"GetStartedModal\"\n        onCancel={() => this.props.history.push(\"/\")}\n        visible\n        onOk={this.handleCreate}\n        okText=\"Submit\"\n      >\n        <Form style={{ marginLeft: \"5%\" }} layout=\"vertical\">\n          <h2>What is your occupation?</h2>\n          <Form.Item label=\"User role\">\n            {getFieldDecorator(\"UserRole\", {\n              rules: [\n                {\n                  required: true,\n                  message: \"Please choose an option or specify in other section\"\n                }\n              ]\n            })(<Input />)}\n          </Form.Item>\n          <Form.Item label=\"Experience\">\n            {getFieldDecorator(\"Experience\", {\n              rules: [{ required: true, message: \"Please choose an option\" }]\n            })(<Input />)}\n          </Form.Item>\n          <h2>What are your skills?</h2>\n          <Form.Item className=\"slider\" label=\"Programming language\">\n            {getFieldDecorator(\"language\", {})(<Input />)}\n          </Form.Item>\n\n          <Form.Item className=\"slider\" label=\"Web Frameworks\">\n            {getFieldDecorator(\"Frameworks\", {})(<Input />)}\n          </Form.Item>\n\n          <Form.Item className=\"slider\" label=\"Other\">\n            {getFieldDecorator(\"Other\", {})(<Input />)}\n          </Form.Item>\n\n          <div>\n            <h2>How many applications have you built?</h2>\n            <Form.Item label=\"On NEXEN\">\n              {getFieldDecorator(\"OnNEXEN\", {\n                rules: [{ required: true, message: \"Please choose an option\" }]\n              })(<Input />)}\n            </Form.Item>\n\n            <Form.Item label=\"On other platforms in BNY Mellon\">\n              {getFieldDecorator(\"otherPlatforms\", {\n                rules: [{ required: true, message: \"Please choose an option\" }]\n              })(<Input />)}\n            </Form.Item>\n          </div>\n        </Form>\n      </Modal>\n    );\n  }\n}\nconst mapState = state => ({\n  tasks: state.tasks\n});\nexport default withRouter(connect(mapState)(Form.create()(BookingForm)));\n","export const ADD_TASK = \"add task\";\nexport const REMOVE_TASK = \"remove task\";\nexport const GET_TASKS = \"get tasks\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport BookingForm from \"./components/bookingForm\";\nimport store from \"./redux/actions\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <Switch>\n        <Route path=\"/\" component={BookingForm} />\n      </Switch>\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}