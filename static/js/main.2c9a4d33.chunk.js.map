{"version":3,"sources":["firebase.js","redux/reducer.js","redux/reducers.js","redux/actions.js","redux/actionTypes.js","components/bookingForm.js","components/adminPage/mainAdminComponent.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","database","initialState","tasks","state","arguments","length","undefined","action","o","get tasks","add task","concat","Object","toConsumableArray","task","remove task","filter","id","type","combineReducers","watchTaskAddedEvent","dispatch","ref","on","snap","val","console","log","watchTaskRemovedEvent","getTasksThunk","once","forEach","data","push","then","getTasks","createStore","Reducer","applyMiddleware","thunkMiddleware","BookingForm","handleCreate","form","_this","props","validateFields","err","values","resetFields","onCancel","alert","history","window","location","reload","this","getFieldDecorator","react_default","a","createElement","es_form","style","marginLeft","width","marginRight","marginTop","layout","Item","label","rules","required","message","input","className","es_button","htmlType","onClick","Component","withRouter","connect","create","Admin","Boolean","hostname","match","ReactDOM","render","es","store","BrowserRouter","Switch","Route","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2c9a4d33.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/database\";\nvar config = {\n  apiKey: \"AIzaSyDX2zAjIzTB9fu7hadZLZmjqscraC3uTH8\",\n  authDomain: \"dodo-75272.firebaseapp.com\",\n  databaseURL: \"https://dodo-75272.firebaseio.com\",\n  projectId: \"dodo-75272\",\n  storageBucket: \"dodo-75272.appspot.com\",\n  messagingSenderId: \"1065766410382\"\n};\nfirebase.initializeApp(config);\n\nconst database = firebase.database();\nexport default database;\n//firebaseApp.firestore().settings({ timestampsInSnapshots: true })\nexport const addRoomToFirebase = task => {\n  const id = task.id;\n  database.ref(`/rooms/${id}`).set(task);\n};\n\nexport const removeRoomFromFirebase = id => {\n  database.ref(`/rooms/${id}`).remove();\n};\n","const initialState = [];\n\nconst tasks = (state = initialState, action) => {\n  const o = {\n    \"get tasks\": () => action.tasks,\n    \"add task\": () => [...state, action.task],\n    \"remove task\": () => state.filter(task => task.id !== action.task.id)\n  };\n  return o[action.type] ? o[action.type]() : state;\n};\n\nexport default tasks;\n","import tasks from \"./reducer.js\";\n\nimport { combineReducers } from \"redux\";\nexport default combineReducers({ tasks });\n","import * as types from \"./actionTypes.js\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport database from \"../firebase\";\nimport thunkMiddleware from \"redux-thunk\";\nimport Reducer from \"./reducers\";\n\nexport const getTasks = tasks => ({ type: types.GET_TASKS, tasks });\nexport const addTask = task => ({ type: types.ADD_TASK, task });\nexport const removeTask = task => ({ type: types.REMOVE_TASK, task });\n\n/**\n * LISTENERS\n */\n\nexport const watchTaskAddedEvent = dispatch => {\n  database.ref(`/rooms/`).on(\"child_changed\", snap => {\n    dispatch(addTask(snap.val()));\n    console.log(\"hi\");\n  });\n};\n\nexport const watchTaskRemovedEvent = dispatch => {\n  database.ref(`/rooms/`).on(\"child_removed\", snap => {\n    dispatch(removeTask(snap.val()));\n  });\n};\n\n/**\n * THUNKS\n */\nexport const getTasksThunk = () => dispatch => {\n  const tasks = [];\n  database\n    .ref(`/rooms/`)\n    .once(\"value\", snap => {\n      snap.forEach(data => {\n        let task = data.val();\n        tasks.push(task);\n      });\n    })\n    .then(() => dispatch(getTasks(tasks)));\n};\n\nexport default createStore(Reducer, applyMiddleware(thunkMiddleware));\n","export const ADD_TASK = \"add task\";\nexport const REMOVE_TASK = \"remove task\";\nexport const GET_TASKS = \"get tasks\";\n","import React, { Component } from \"react\";\nimport \"../App.css\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { Button, Input, Form } from \"antd\";\nimport { addRoomToFirebase, removeRoomFromFirebase } from \"../firebase\";\nimport {\n  getTasksThunk,\n  watchTaskRemovedEvent,\n  watchTaskAddedEvent\n} from \"../redux/actions\";\n\nclass BookingForm extends Component {\n  componentDidMount() {\n    this.props.dispatch(getTasksThunk());\n    watchTaskAddedEvent(this.props.dispatch);\n    watchTaskRemovedEvent(this.props.dispatch);\n  }\n\n  handleCreate = () => {\n    const form = this.props.form;\n\n    form.validateFields((err, values) => {\n      if (err) return;\n      form.resetFields();\n      this.onCancel();\n      alert(\"thank you for registration\");\n    });\n  };\n\n  onCancel = () => {\n    this.props.history.push(\"/\");\n    window.location.reload();\n  };\n\n  render() {\n    const {\n      form: { getFieldDecorator }\n    } = this.props;\n\n    return (\n      // <Modal\n      //   title=\"Let's Get Started\"\n      //   className=\"GetStartedModal\"\n      //   onCancel={this.onCancel}\n      //   visible\n      //   onOk={this.handleCreate}\n      //   okText=\"Submit\"\n      // >\n      <Form\n        style={{\n          marginLeft: \"auto\",\n          width: \"80%\",\n          marginRight: \"auto\",\n          marginTop: \"2%\"\n        }}\n        layout=\"vertical\"\n      >\n        <h2>What is your occupation?</h2>\n        <Form.Item label=\"User role\">\n          {getFieldDecorator(\"UserRole\", {\n            rules: [\n              {\n                required: true,\n                message: \"Please choose an option or specify in other section\"\n              }\n            ]\n          })(<Input />)}\n        </Form.Item>\n        <Form.Item label=\"Experience\">\n          {getFieldDecorator(\"Experience\", {\n            rules: [{ required: true, message: \"Please choose an option\" }]\n          })(<Input />)}\n        </Form.Item>\n        <h2>What are your skills?</h2>\n        <Form.Item className=\"slider\" label=\"Programming language\">\n          {getFieldDecorator(\"language\", {})(<Input />)}\n        </Form.Item>\n\n        <Form.Item className=\"slider\" label=\"Web Frameworks\">\n          {getFieldDecorator(\"Frameworks\", {})(<Input />)}\n        </Form.Item>\n\n        <Form.Item className=\"slider\" label=\"Other\">\n          {getFieldDecorator(\"Other\", {})(<Input />)}\n        </Form.Item>\n\n        <div>\n          <h2>How many applications have you built?</h2>\n          <Form.Item label=\"On NEXEN\">\n            {getFieldDecorator(\"OnNEXEN\", {\n              rules: [{ required: true, message: \"Please choose an option\" }]\n            })(<Input />)}\n          </Form.Item>\n\n          <Form.Item label=\"On other platforms in BNY Mellon\">\n            {getFieldDecorator(\"otherPlatforms\", {\n              rules: [{ required: true, message: \"Please choose an option\" }]\n            })(<Input />)}\n          </Form.Item>\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\" onClick={this.onCancel}>\n              Cancel\n            </Button>\n            <Button type=\"primary\" onClick={this.handleCreate}>\n              Submit\n            </Button>\n          </Form.Item>\n        </div>\n      </Form>\n      // </Modal>\n    );\n  }\n}\nconst mapState = state => ({\n  tasks: state.tasks\n});\nexport default withRouter(connect(mapState)(Form.create()(BookingForm)));\n","import React, { Component } from \"react\";\n\nimport { connect } from \"react-redux\";\nimport { Button, Input, Form } from \"antd\";\nimport { addRoomToFirebase, removeRoomFromFirebase } from \"../../firebase\";\nimport {\n  getTasksThunk,\n  watchTaskRemovedEvent,\n  watchTaskAddedEvent\n} from \"../../redux/actions\";\n\nclass Admin extends Component {\n  componentDidMount() {\n    this.props.dispatch(getTasksThunk());\n    watchTaskAddedEvent(this.props.dispatch);\n    watchTaskRemovedEvent(this.props.dispatch);\n  }\n\n  render() {\n    return <div>hi </div>;\n  }\n}\nconst mapState = state => ({\n  tasks: state.tasks\n});\nexport default connect(mapState)(Admin);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport BookingForm from \"./components/bookingForm\";\nimport Admin from \"./components/adminPage/mainAdminComponent\";\nimport store from \"./redux/actions\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <Switch>\n        <Route path=\"/admin\" component={Admin} />\n        <Route path=\"/\" component={BookingForm} />\n      </Switch>\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}